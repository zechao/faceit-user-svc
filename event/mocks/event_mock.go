// Code generated by MockGen. DO NOT EDIT.
// Source: event.go
//
// Generated by this command:
//
//	mockgen -source=event.go -destination=mocks/event_mock.go -package=mockevent
//

// Package mockevent is a generated GoMock package.
package mockevent

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// SendEvent mocks base method.
func (m *MockEventHandler) SendEvent(ctx context.Context, eventType string, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", ctx, eventType, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockEventHandlerMockRecorder) SendEvent(ctx, eventType, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockEventHandler)(nil).SendEvent), ctx, eventType, payload)
}
